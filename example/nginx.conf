# docker rm -f godfs-nginx-proxy
# docker run -p 80:80 --name godfs-nginx-proxy -v /root/godfs/conf/nginx.conf:/etc/nginx/nginx.conf:ro -d nginx
user  nobody;
worker_processes  4;

error_log  logs/error.log warn;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    #gzip  on;


    # 将同一个group的storage server配置在一起
    upstream group1 {
        server storage_group1:8001 weight=1;
    }

    upstream group2 {
        server storage_group2:8002 weight=1;
    }

    upstream upload {
        server storage_group1:8001 weight=1;
        server storage_group2:8002 weight=1;
    }


    server {
        listen 80;
        client_max_body_size 2048M;
        proxy_request_buffering off;


        location /download/G01 {
            # 当刚上传的文件尚未完全在组内同步完成时，如果访问到没有同步完成的server（404），会自动跳到下一个组内服务器尝试下载，直至返回值不是404
            proxy_next_upstream http_404;
            proxy_pass http://group1;
        }

        location /download/G02 {
            # 当刚上传的文件尚未完全在组内同步完成时，如果访问到没有同步完成的server（404），会自动跳到下一个组内服务器尝试下载，直至返回值不是404
            proxy_next_upstream http_404;
            proxy_pass http://group2;
        }


        location /upload {
            proxy_next_upstream http_404;
            proxy_pass http://upload;
        }
    }

}

stream {

  upstream group1 {
    server storage_group1:1024;
  }
  upstream group2 {
    server storage_group2:1025;
  }
  upstream tracker1 {
    server tracker1:1022;
  }
  upstream tracker2 {
    server tracker2:1023;
  }


  server {
    listen 2033;
    proxy_pass group1;
  }
  server {
    listen 2034;
    proxy_pass group2;
  }
  server {
    listen 1022;
    proxy_pass tracker1;
  }
  server {
    listen 1023;
    proxy_pass tracker2;
  }

}
